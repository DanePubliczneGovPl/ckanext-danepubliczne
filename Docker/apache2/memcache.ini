extension=memcache.so

[memcache]
; Whether to transparently failover to other servers on errors.
;
; memcache.allow_failover="1"

; Defines how many servers to try when setting and getting data. Used
; only in conjunction with memcache.allow_failover.
;
; memcache.max_failover_attempts="20"

; Data will be transferred in chunks of this size, setting the value
; lower requires more network writes. Try increasing this value to
; 32768 if noticing otherwise inexplicable slowdowns.
;
; memcache.chunk_size="8192"

; The default TCP port number to use when connecting to the memcached
; server if no other port is specified.
;
; memcache.default_port="11211"

; Controls which strategy to use when mapping keys to servers. Set
; this value to consistent to enable consistent hashing which allows
; servers to be added or removed from the pool without causing keys to
; be remapped. Setting this value to standard results in the old
; strategy being used.
;
; memcache.hash_strategy="consistent"

; Controls which hash function to apply when mapping keys to servers,
; crc32 uses the standard CRC32 hash while fnv uses FNV-1a
;
; memcache.hash_function="crc32"

; Use memcache as a session handler by setting this value to memcache.
;
; session.save_handler="memcache"

; Defines a comma separated of server urls to use for session storage,
; for example session.save_path="tcp://host1:11211,tcp://host2:11211".
;
; Each url may contain parameters which are applied to that server,
; they are the same as for the Memcache::addServer() method. For
; example: session.save_path="tcp://host1:11211?persistent=1&weight=1&timeout=1&retry_interval=15"
;
; session.save_path="tcp://localhost:11211"

; Additional parameters
; memcache.protocol=ascii
; memcache.redundancy=1
; memcache.session_redundancy=2
memcache.compress_threshold=0
; memcache.lock_timeout=15

